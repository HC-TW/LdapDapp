extends layout

block content
    .row
        .col-12
            ul#myTab.nav.nav-tabs(role='tablist')
                li.nav-item
                    a#control-tab.nav-link.active(data-toggle='tab' href='#control' role='tab' aria-controls='control' aria-selected='true') Control panel
                li.nav-item
                    a#data-tab.nav-link(data-toggle='tab' href='#data' role='tab' aria-controls='data' aria-selected='false') Data viewer
            #myTabContent.tab-content
                #control.tab-pane.fade.show.active(role='tabpanel' aria-labelledby='control-tab')
                    .container
                        .row
                            .col-12 
                                .form-group.row
                                    label.col-sm-4.col-form-label.font-weight-bold(for='staticEmail') Address of TSP
                                    .col-sm-8
                                        input#staticEmail.form-control-plaintext(type='text' readonly='' value="#{org_address}")

                            .col-12
                                table.table.table-bordered#org-table
                                    thead
                                        tr
                                            th.text-center(scope='col') Index
                                            th.text-center(scope='col') Address of data provider
                                            th.text-center(scope='col') Status
                                    tbody

                        .row
                            .col-12
                                .text-right
                                    //- button.btn.btn-primary.auth-btn.mr-2(type='button') 授權
                                    button.btn.btn-primary.mr-2.confirm-btn(type='button' data-toggle='modal', data-target='#infoModal') 授權
                                    button.btn.btn-danger.revoke-btn(type='button') 撤回
                        .row.mt-2
                            .col-md-6.col.my-2
                                .card
                                    .card-header
                                        | 總資產
                                    .card-body
                                        h5.total-deposit.text-right.my-2
                                        canvas#myDoughnut(width='400' height='400')
                            .col-md-6.col.my-2
                                .card
                                    .card-header
                                        | Some div
                                    .card-body
                                        canvas#myLine(width='400' height='400')

                #data.tab-pane.fade(role='tabpanel' aria-labelledby='data-tab') 
                    div(style='overflow-x:auto;')
                        table.mt-2.table.table-striped
                            thead
                                tr
                                    th(scope='col') Address of org
                                    th(scope='col') Created at
                                    th(scope='col') Updated at
                            tbody
                                each val, idx in tokens
                                    tr
                                        td #{val.org}
                                        td #{val.createdAt}
                                        td #{val.updatedAt}
                    div
                        button.btn.btn-info.request-token-btn(type='button') Get Token
                    br



    #infoModal.modal.fade(tabindex='-1' role='dialog' aria-hidden='true')
        .modal-dialog(role='document')
            .modal-content
                .modal-header
                    h5.modal-title 通知
                    button.close(type='button' data-dismiss='modal' aria-label='Close')
                        span(aria-hidden='true') ×
                .modal-body
                    | 您是否要授權
                    span.font-weight-bold
                        | 當前TSP
                    | 存取您在下列機構的資料？
                    .confirm-list.font-weight-bold
                .modal-footer
                    button.btn.btn-secondary(type='button' data-dismiss='modal') 取消
                    button.btn.btn-primary.auth-btn(type='button' data-dismiss='modal') 確認


    script. 
        $(function() {
            let account = "";
            let contract_address = "#{address}";
            let target_address = "#{org_address}";
            window.ethereum.on('accountsChanged', function(accounts) {
                account = accounts[0];
                $(".account").html("Account:" + account);    
                $(".func4-input1").val(account);
            });

            $.getScript( "/javascripts/web3_bundle.js", async function(data, textStatus, jqxhr) {
                let data_org, data_acc;
                let contractAccInstance;
                let contractOrgInstance;
                $.when(
                    $.getJSON('/dataSharing/org.json', function(data) {
                        data_org = data;
                    }),
                    $.getJSON('/dataSharing/acc.json', function(data) {
                        data_acc = data;
                    })
                ).done(function() {
                    web3.eth.getAccounts().then((accounts) => {
                        account = accounts[0];
                    });

                    contractOrgInstance = new web3.eth.Contract(data_org.abi, contract_address);

                    contractOrgInstance.methods.getOrgList().call({from: account})
                    .then( (result) => { // orgList
                        //- alert(`Index: 0, Address: ${result}`);
                        console.log(result);

                        contractOrgInstance.methods.getAccessManagerAddress(account).call({from: account})
                        .then( (r) => {
                            contractAccInstance = new web3.eth.Contract(data_acc.abi, r);
                            console.log("accMgr:"+r);
                            contractAccInstance.methods.owner().call({from: account})
                            .then( (r) => {
                                console.log("owner:"+r);
                            });
                        })
                        .then( () => {
                            for (let i = 0; i < result.length; ++i) {
                                if (result[i] == target_address) continue;
                                contractAccInstance.methods.validatePermission(target_address, result[i]).call({from: account})
                                .then( (r) => {
                                    console.log(r);
                                    $("#org-table>tbody").append(`
                                        <tr>
                                            <td>
                                                <div class="custom-control custom-checkbox text-center">
                                                    <input class="custom-control-input" id="customCheck${i}" type="checkbox" value="${result[i]}" name="orgAddress"/>
                                                    <label class="custom-control-label" for="customCheck${i}"></label>
                                                </div>
                                            </td>
                                            <td class="text-center">${result[i]}</td>
                                            <td class="text-center">`+
                                            (r == false ? `<i class="fas fa-lock"></i>` : `<i class="fas fa-lock-open"></i>`)
                                            +`</td>
                                        </tr>
                                    `);
                                });
                            }
                        });
                    })
                    .catch( (err) => {
                        alert(err);
                    });

                    $(".confirm-btn").on("click", function(e) {
                        let selected = [];
                        $(".confirm-list").html("");
                        $.each($("input[name=orgAddress]:checked"), function() {
                            selected.push($(this).val());
                            $(".confirm-list").html($(".confirm-list").html()+"<br>"+$(this).val());
                        });
                    });
                    

                    $(".auth-btn").on("click", function(e) {
                        let promises = [];
                        $(".confirm-list").html("");
                        $.each($("input[name=orgAddress]:checked"), function() {
                            var promise = new Promise( async (resolve, reject) => {
                                await contractAccInstance.methods.authorizeAccess(target_address, $(this).val()).send({from: account})
                                .then( (result) => {
                                    console.log("auth txHash:"+result.transactionHash);
                                    resolve();    
                                })
                                .catch( (err) => {
                                    console.log("err"+err);
                                    alert("Authorize failed.");
                                    reject();
                                })  
                            });
                            promises.push(promise);
                        });

                        var result = Promise.all(promises);
                        result.then(() => location.reload());
                    });

                    $(".revoke-btn").on("click", function(e) {
                        let promises = [];

                        $.each($("input[name=orgAddress]:checked"), function() {
                            let promise = new Promise((resolve, reject) => {
                                contractAccInstance.methods.revokeAccess(target_address, $(this).val()).send({from: account})
                                .then( (result) => {
                                    console.log("revoke txHash:"+result.transactionHash);
                                    resolve();
                                })
                                .catch( (err) => {
                                    console.log("err"+err);
                                    alert("Revoke failed.");
                                    reject();
                                })
                            });
                            promises.push(promise);
                        });
                        
                        let result = Promise.all(promises);
                        result.then(() => location.reload());
                    });

                    $(".request-token-btn").on("click", function(e) {
                        contractOrgInstance.methods.getOrgList().call({from: account})
                        .then( (result) => { // orgList
                            let validList = [];
                            contractOrgInstance.methods.getAccessManagerAddress(account).call({from: account})
                            .then( (r) => {
                                contractAccInstance = new web3.eth.Contract(data_acc.abi, r);
                                console.log("accMgr:"+r);
                                contractAccInstance.methods.owner().call({from: account})
                                .then( (r) => {
                                    console.log("owner:"+r);
                                });
                            })
                            .then( async () => {                                
                                for (let i = 0; i < result.length; ++i) {
                                    await contractAccInstance.methods.validatePermission(target_address, result[i]).call({from: account})
                                    .then( (r) => {
                                        if (true){
                                        //- if (r) {
                                            console.log(result[i]);
                                            validList.push(result[i].toUpperCase());                                    
                                        }
                                    });
                                }
                                alert("Ready to request token.");
                                let hashed = await contractOrgInstance.methods.getId().call({from: account})
                                $.ajax({
                                    url: '/dataSharing/getAccessToken',
                                    type: 'get',
                                    cache: false,
                                    data: {
                                        provider_address: validList,
                                        hashed: hashed
                                    },
                                    success: (res) => {
                                        alert(res.msg);
                                        location.reload();
                                    },
                                    error: (e) => {
                                        alert(e);
                                        console.log(e);
                                    }
                                });
                            })
                        })
                        .catch( (err) => {
                            alert(err);
                        });
                    });

                    let deposit = [#{user.balance}];
                    let orgs = ["#{org_address}".substr(0,5)];
                    let a = JSON.parse("#{data}".replace(/&quot;/g,'"'));
                    let b = JSON.parse("#{orgs}".replace(/&quot;/g,'"'));
                    let total = 0;
                    for (let i = 0; i < a.length; ++i) {
                        deposit.push(a[i]);
                        orgs.push(b[i]);
                    }
                    total = deposit.reduce((a,b)=>parseInt(a, 0)+parseInt(b,0));
                    $(".total-deposit").html("$&nbsp"+total);
                    if ("#{errorMsg}" !== "") alert("#{errorMsg}");

                    // chart
                    var ctx1 = document.getElementById("myDoughnut").getContext('2d');
                    var myDoughnutChart = new Chart(ctx1, {
                        type: "doughnut",
                        data: {
                            datasets: [
                                {
                                    backgroundColor: [
                                        'rgba(255, 99, 132, 0.2)',
                                        'rgba(54, 162, 235, 0.2)',
                                        'rgba(255, 206, 86, 0.2)',
                                        'rgba(75, 192, 192, 0.2)',
                                        'rgba(153, 102, 255, 0.2)',
                                        'rgba(255, 159, 64, 0.2)'
                                    ],
                                    borderColor: [
                                        'rgba(255,99,132,1)',
                                        'rgba(54, 162, 235, 1)',
                                        'rgba(255, 206, 86, 1)',
                                        'rgba(75, 192, 192, 1)',
                                        'rgba(153, 102, 255, 1)',
                                        'rgba(255, 159, 64, 1)'
                                    ],
                                    borderWidth: 1,
                                    hoverBorderWidth: 4,
                                    data: deposit
                                }
                            ],

                            // These labels appear in the legend and in the tooltips when hovering different arcs
                            labels: orgs
                        },
                        options: {}
                    });

                    var ctx2 = document.getElementById("myLine").getContext('2d');
                    var myLineChart = new Chart(ctx2, {
                        type: "line",
                        data: {
                            datasets: [
                                {
                                    backgroundColor: [
                                        'rgba(54, 162, 235, 0.2)',
                                        'rgba(255, 206, 86, 0.2)',
                                        'rgba(75, 192, 192, 0.2)',
                                        'rgba(153, 102, 255, 0.2)',
                                        'rgba(255, 159, 64, 0.2)'
                                    ],
                                    borderColor: [
                                        'rgba(54, 162, 235, 1)',
                                        'rgba(255, 206, 86, 1)',
                                        'rgba(75, 192, 192, 1)',
                                        'rgba(153, 102, 255, 1)',
                                        'rgba(255, 159, 64, 1)'
                                    ],
                                    borderWidth: 1,
                                    data: [20, 15, 8, 16]
                                }
                            ],

                            // These labels appear in the legend and in the tooltips when hovering different arcs
                            labels: ["Red", "Yellow", "Blue", "Black"]
                        },
                        options: {
                            elements: {
                                line: {
                                    tension: 0 // 禁用贝塞尔曲线
                                }
                            },
                            scales: {
                                yAxes: [{
                                    ticks: { min: 0, max: 30}
                                }]
                            }

                        }
                    });
                });
            });
        });
